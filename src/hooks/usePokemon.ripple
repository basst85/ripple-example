import { track } from 'ripple';

type Pokemon = { name: string; url: string; sprites?: { front_default: string } };

const fetchPokemonData = async () => {
	const response = await fetch('https://pokeapi.co/api/v2/pokemon?limit=5&offset=' + Math.floor(Math.random() * 1000));

	if (!response.ok) {
		throw new Error(`Failed to fetch Pokemon list (${response.status})`);
	}
	const data = await response.json();

	const pokemonDetails = await Promise.all(data.results.map(async (poke: Pokemon) => {
		const detailResponse = await fetch(poke.url);

		if (!detailResponse.ok) {
			throw new Error(`Failed to fetch details for ${poke.name}`);
		}
		const details = await detailResponse.json();

		return {
			...poke,
			sprites: details.sprites,
		};
	}));

	return pokemonDetails;
};

export const usePokemon = () => {
	const pokemon = track<Pokemon[] | null>(null);
	const loading = track(true);
	const error = track<string | null>(null);

	const fetchData = async () => {
		@loading = true;
		@error = null;

		try {
			const result = await fetchPokemonData();
			@pokemon = result;
		} catch (err) {
			@error = err instanceof Error ? err.message : 'An error occurred';
			console.error('Failed to fetch Pokemon:', err);
		} finally {
			@loading = false;
		}
	};

	// Initial fetch
	fetchData();

	return {
		pokemon,
		loading,
		error,
		refetch: fetchData
	};
};