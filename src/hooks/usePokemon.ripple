import { track } from 'ripple';

type Pokemon = { name: string; url: string; sprites?: { front_default: string } };

export const usePokemon = () => {
	let pokemon = track([]);
	let loading = track(true);
	let error = track(null);

	const fetchPokemon = async () => {
		@loading = true;
		@error = null;

		try {
			const response = await fetch('https://pokeapi.co/api/v2/pokemon?limit=5&offset=' + Math.floor(Math.random() * 1000));

			if (!response.ok) {
				throw new Error('Failed to fetch Pokemon list');
			}
			const data = await response.json();

			const pokemonDetails = await Promise.all(data.results.map(async (poke: Pokemon) => {
				const detailResponse = await fetch(poke.url);

				if (!detailResponse.ok) {
					throw new Error(`Failed to fetch details for ${poke.name}`);
				}
				const details = await detailResponse.json();

				return {
					...poke,
					sprites: details.sprites,
				};
			}));

			@pokemon = pokemonDetails;
		} catch (err) {
			@error = err instanceof Error ? err.message : 'An error occurred';
			console.error('Error fetching Pokemon:', err);
		} finally {
			@loading = false;
		}
	};

	fetchPokemon();

	return {
		pokemon,
		loading,
		error,
		refresh: fetchPokemon,
	};
};